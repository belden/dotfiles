(provide 'belden-birds-eye)
(require 'scroll-bar)
(require 'follow)

(defvar be-font-picked 6)
(defvar be-font-list)
(setq be-font-list (list
  "-misc-fixed-medium-r-normal--6-60-75-75-c-40-iso8859-1"     ; teenier font 0
  "-misc-fixed-medium-r-normal--8-60-100-100-c-50-iso8859-1"   ; teeny font   1
  "-misc-fixed-medium-r-normal--10-100-75-75-c-60-iso8859-1"   ; tinier font  2
  "-misc-fixed-medium-r-normal--14-130-75-75-c-70-iso8859-1"   ; tiny font    3
  "-misc-fixed-medium-r-normal--16-160-75-75-c-80-iso8859-1"   ; small font   4
  "-misc-fixed-bold-r-normal--15-120-100-100-c-90-iso8859-1"   ; medium font  5
  "-misc-fixed-medium-r-normal--20-200-75-75-c-100-iso8859-1"  ; big font     6
  "-vga-fixed-medium-r-normal--24-230-75-75-c-120-iso8859-1"   ; huge font    7
  "-adobe-courier-bold-r-normal--24-240-75-75-m-150-iso8859-2" ; huge-wide    8
  ))
(defun belden-change-font (&optional font-index)
  (interactive)
  (if (not font-index) (setq font-index (1+ be-font-picked)))
  (let (width height)
    (if (>= font-index (length be-font-list)) (setq font-index 0))
    (setq be-font-picked font-index)
    (setq width (belden-frame-current-width))
    (setq height (belden-frame-current-height))
    (set-default-font (belden-font-number font-index))
    (belden-set-frame-size width height)
    ))
(defun belden-font-number (font-index)
  (let ((count 0) (font be-font-list))
    (while (< count font-index)
      (setq font (cdr font))
      (setq count (1+ count)))
    (car font)))
(defun belden-default-font-teenier ()
  (interactive) (belden-change-font 0))
(defun belden-default-font-teeny ()
  (interactive) (belden-change-font 1))
(defun belden-default-font-tinier ()
  (interactive) (belden-change-font 2))
(defun belden-default-font-tiny ()
  (interactive) (belden-change-font 3))
(defun belden-default-font-small ()
  (interactive) (belden-change-font 4))
(defun belden-default-font-medium ()
  (interactive) (belden-change-font 5))
(defun belden-default-font-big ()
  (interactive) (belden-change-font 6))
(defun belden-default-font-huge ()
  (interactive) (belden-change-font 7))
(defun belden-default-font-huge-wide ()
  (interactive) (belden-change-font 8))

(defun belden-bigger-font ()
  (interactive)
  (let ((fontsize (1+ be-font-picked)))
    (when (>= fontsize (length be-font-list))
      (message "This is the biggest font I've got")
      (setq fontsize (1- (length be-font-list))))
    (belden-change-font fontsize)))
(defun belden-smaller-font ()
  (interactive)
  (let ((fontsize (1- be-font-picked)))
    (when (<= fontsize 0)
      (message "This is the smallest font I've got")
      (setq fontsize 0))
    (belden-change-font fontsize)))


(defvar be-birds-eye-font be-font-picked)
(defun belden-birds-eye (&optional max-windows)
  (interactive "p")
  (if (eq max-windows 1) (setq max-windows 15))
  (if (not follow-mode) (setq be-birds-eye-font be-font-picked))
  (delete-other-windows)
  (goto-char (point-min))
  (let ((lines (count-lines (point-min) (point-max)))
        (height (- (frame-parameter 'nil 'height) 2))
        (windows 1)
        (window-pixel-width (belden-window-pixel-width))
        (min-chars 40)
        (min-comfortable-chars 50)
        pages columns
        )
    ; pick a relatively small font
    (setq pages (/ lines (float height)))
    (setq columns (/ (/ window-pixel-width
                        (belden-font-pixel-width
                         (belden-font-number be-font-picked)))
                     min-comfortable-chars))
    (while (and (> pages columns)
                (> be-font-picked 0))
      (setq be-font-picked (1- be-font-picked))
      (setq height (- (/ (frame-pixel-height)
                         (belden-font-pixel-height
                          (belden-font-number be-font-picked))) 2))
      (setq pages (/ lines (float height)))
      (setq columns (/ (/ window-pixel-width
                          (belden-font-pixel-width
                           (belden-font-number be-font-picked)))
                       min-comfortable-chars))
      )
    (belden-change-font be-font-picked)
    ; turn on follow mode settings
    (scroll-bar-mode -1)
    (follow-mode t)
    (setq truncate-lines t)
    ; split window multiple times
    (while (and (> pages 1)
                (< windows max-windows)
                (> (window-width) min-chars))
      (split-window-horizontally)
      (balance-windows)
      (setq windows (1+ windows))
      (setq pages (1- pages)))
    ))
(defun belden-turtles-eye ()
  (interactive)
  (follow-mode 'nil)
  (delete-other-windows)
  (set-scroll-bar-mode 'nil)
  (setq truncate-lines 'nil)
  (belden-change-font be-birds-eye-font))
(defun belden-birds-eye-pgup ()
  (interactive)
  (scroll-down (belden-birds-eye-scroll-size)))
(defun belden-birds-eye-pgdn ()
  (interactive)
  (scroll-up (belden-birds-eye-scroll-size)))
(defun belden-birds-eye-scroll-size ()
  (- (* (frame-parameter 'nil 'height) (count-windows))
     (+ (* 2 (count-windows) 2))))
(defun my-follow-mode-hook ()
  (global-set-key (kbd "<prior>") 'belden-birds-eye-pgup)
  (global-set-key (kbd "<next>") 'belden-birds-eye-pgdn)
  (global-set-key [(control super ,)] 'belden-birds-eye-scroll-left)
  (global-set-key [(control super .)] 'belden-birds-eye-scroll-right)
  )
(defun my-follow-mode-off-hook ()
  (global-set-key (kbd "<prior>") 'scroll-down)
  (global-set-key (kbd "<next>") 'scroll-up)
  (global-unset-key [(control super ,)])
  (global-unset-key [(control super .)])
  )
(add-hook 'follow-mode-hook 'my-follow-mode-hook)
(add-hook 'follow-mode-off-hook 'my-follow-mode-off-hook)
(defun belden-birds-eye-add-column ()
  (interactive)
  (when (not follow-mode)
    (setq be-birds-eye-font be-font-picked)
    (scroll-bar-mode -1)
    (follow-mode t)
    (setq truncate-lines t)
    )
  (split-window-horizontally)
  (balance-windows))
(defun belden-birds-eye-delete-column ()
  (interactive)
  (if (eq (count-windows) 2)
      (belden-turtles-eye)
    (progn (delete-window) (balance-windows))))
(defun belden-birds-eye-scroll-right ()
  (interactive)
  (walk-windows
   (function
    (lambda (win)
      (set-window-hscroll win (+ (window-hscroll win) 10))))))
(defun belden-birds-eye-scroll-left ()
  (interactive)
  (walk-windows
   (function
    (lambda (win)
      (set-window-hscroll win (+ (window-hscroll win) -10))))))
(defun belden-font-pixel-height (font)
  (aref (belden-font-info font) 3))
(defun belden-font-pixel-width (font)
  (aref (belden-font-info font) 2))
(defun belden-font-info (font)
  (let ((font-info (font-info font)))
    (when (not font-info)
      (make-face 'fooface)
      (set-face-font 'fooface font)
      (setq font-info (font-info font)))
    font-info))
(defun belden-window-pixel-width ()
  (* (window-width)
     (belden-font-pixel-width (frame-parameter nil 'font))))
