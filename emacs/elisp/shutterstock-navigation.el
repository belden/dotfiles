(provide 'belden-navigation)

(defun previous-key (&optional arg)
  (if (not arg) (setq arg 1))
  (let (recent-keys index)
    (setq recent-keys (recent-keys))
    (setq index (- (length recent-keys) (1+ arg)))
    (if (>= index 0)
        (aref recent-keys index)
      'nil)))

(defun previous-key-string (&optional arg)
  (belden-chord-for-key (vector (previous-key arg))))

(defun belden-chord-for-key (key)
  (key-description key))

(defun belden-goto-end (&optional ARG)
  (interactive)
  (let ((prevkey (previous-key-string)))
    (if (or (string= prevkey "<end>")
            (string= prevkey "<kp-end>")
            (and (string= (previous-key-string 7) "ESC")
                 (string= (previous-key-string 6) "[")
                 (string= (previous-key-string 5) "4")
                 (string= (previous-key-string 4) "~")))
        (end-of-buffer ARG)
      (end-of-line ARG))))

(defun belden-goto-beg (&optional ARG)
  (interactive)
  (let ((prevkey (previous-key-string)))
    (if (or (string= prevkey "<home>")
            (string= prevkey "<kp-home>")
            (and (string= (previous-key-string 7) "ESC")
                 (string= (previous-key-string 6) "[")
                 (string= (previous-key-string 5) "1")
                 (string= (previous-key-string 4) "~")))
        (beginning-of-buffer ARG)
      (beginning-of-line ARG))))

(defun belden-forward-word ()
   "Move one word forward. Leave the pointer at start of word
   instead of emacs default end of word. Treat _ as part of word"
   (interactive)
   (let ((start (point)) boundary at-boundary jump)
     (setq at-boundary (eolp))
     (setq boundary (line-end-position))
     (forward-char 1)
     (backward-word 1)
     (forward-word 2)
     (backward-word 1)
     (backward-char 1)
     (cond ((or (looking-at "_") (looking-at "\\.[0-9]\\.")) (forward-char 1) 
            (belden-forward-word))
           (t (forward-char 1)))
     (if (and (not at-boundary) (> (point) boundary)) (goto-char boundary))
     (setq jump (belden-count-lines start (point)))
     (if (> jump 0) (progn (forward-line (- 1 jump)) (back-to-indentation)))
     ))

(defun belden-backward-word ()
   "Move one word backward. Leave the pointer at start of word
   Treat _ as part of word."
   (interactive)
   (let ((start (point)) boundary at-boundary jump)
     (setq at-boundary (empty-line-prefix))
     (setq boundary (line-beginning-position))
     (backward-word 1)
     (backward-char 1)
     (cond ((or (looking-at "_") (looking-at "\\.[0-9]\\.")) 
            (belden-backward-word))
           (t (forward-char 1)))
     (if (and (not at-boundary) (< (point) boundary)) 
         (progn (goto-char boundary) (back-to-indentation)))
     (setq jump (belden-count-lines start (point)))
     (if (> jump 0) (progn (forward-line (- jump 1)) (end-of-line)))
     ))

(defun belden-goto-matching-char ()
  (interactive)
  (let ((pos (belden-find-matching-position)))
    (goto-char pos)))

(defun belden-matching-char-position (matchchar closechar backward)
  (save-excursion
    (let ((count 0) currchar pos
          (regexp (concat (regexp-quote matchchar) "\\|" (regexp-quote closechar)))
          (myface (face-at-point))
          )
      (while (not pos)
        (if backward
            (search-backward-regexp regexp)
          (progn
            (forward-char 1)
            (search-forward-regexp regexp)
            (backward-char 1)))
        (if (not (equal (face-at-point) myface)) 'nil
          (if (string= (current-char) matchchar)
              (setq count (1- count))
            (if (= count 0) (progn (setq pos (point)))
              (setq count (1+ count))))))
      pos
      )))

(defun belden-next-error-recenter ()
   (interactive)
   (let ((code-window (selected-window)))
     (next-error)
     (pop-to-buffer (compilation-find-buffer))
     (recenter)
     (select-window code-window)
     (recenter)
     )
   )

(defun belden-previous-error-recenter ()
   (interactive)
   (let ((code-window (selected-window)))
     (previous-error)
     (pop-to-buffer (compilation-find-buffer))
     (recenter)
     (select-window code-window)
     (recenter)
     )
   )
