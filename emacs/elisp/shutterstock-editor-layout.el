(provide 'belden-editor-layout)

(defun belden-x-select-text (text &optional push)
  (if (or (not this-command) ; for mouse-drag-region
          (string= this-command "kill-ring-save"))
      (x-select-text text push)))
(defun belden-x-paste-text ()
  (let ((current-key (previous-key 0)))
    (if (or (not (integer-or-marker-p current-key))
            (listp current-key)
            (not (or (= current-key ?\s-p) (= current-key ?\s-v) (= current-key ?\C-y))))
        (x-cut-buffer-or-selection-value))))
(defun belden-paste-it ()
  (interactive)
  (insert (format "%s" (x-get-selection 'PRIMARY 'COMPOUND_TEXT))))

(defun belden-set-background ()
  (interactive)
  (if (window-system) (set-face-background 'default "black"))
  (set-face-foreground 'default "white"))
(defun belden-set-frame-size (&optional width height)
  (interactive)
  (if (not width) (setq width 0.85))
  (if (not height) (setq height 0.95))
  (set-frame-size
   (selected-frame)
   (round (/ (* (x-display-pixel-width) width) (frame-char-width)))
   (round (/ (* (x-display-pixel-height) height) (frame-char-height)))))
(defun belden-set-frame-properties ()
  (interactive)
  (belden-set-frame-size)
  (belden-set-background))
(defun belden-maximize-frame ()
  (interactive)
  (belden-set-frame-size 0.95 0.95)
  (set-frame-position (selected-frame) 0 0)
  )
(defun belden-frame-current-width ()
  (/ (float (round (* (/ (float (* (frame-char-width) (frame-parameter nil 'width)))
     (x-display-pixel-width)) 100))) 100))
(defun belden-frame-current-height ()
  (/ (float (round (* (/ (float (frame-pixel-height))
     (x-display-pixel-height)) 100))) 100))

