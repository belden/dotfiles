#!/usr/bin/env perl

use strict;
use warnings;

my %vars = map { s/^\-\-//; split /=/, $_ } @ARGV;
FILE: for my $conf_file (glob "conf/*") {

	(my $dot_file = $conf_file) =~ s{^conf/}{$ENV{HOME}/.};
	copy_file($conf_file, $dot_file, sub {

		my @vars = /\{\{ (\w+) \}\}/g;
		my @missing = grep { ! exists $vars{$_} } @vars;

		if (scalar @missing) {
			local $" = ', ';
			die "skipped $conf_file (no args given for @missing)\n";
		}

		# interpolate the vars now
		s/\{\{ (\w+) \}\}/$vars{$1}/g;
	});
}

mkdir "$ENV{HOME}/bin/development-tools" if ! -d "$ENV{HOME}/bin/development-tools";
SCRIPT: for my $script_file (glob "scripts/*") {
	(my $destination = $script_file) =~ s{^scripts/}{$ENV{HOME}/bin/development-tools/};
	copy_file($script_file, $destination);
}

sub copy_file {
	my ($source, $destination, $callback) = @_;
  $callback ||= sub {};

	backup($destination) if -e $destination;
	open my $ifh, '<', $source or die "$source: $!\n";
  open my $ofh, '+>', $destination or die "$destination: $!\n";

	while (<$ifh>) {
		local $@;
		eval { $callback->() };
		if ($@) {
			warn $@;
			restore($destination);
			close $ifh;
			close $ofh;
			last;
		}
		print $ofh $_;
	}
}

# lame backup/restores
sub backup {
	my ($file) = @_;
	system("cp $file $file.old");
}

sub restore {
	my ($file) = @_;
	return unless -e "$file.old";
	system("cp $file.old $file");
}
