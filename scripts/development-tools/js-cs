#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long;

my $include_vendor = 0;
my $include_test = 1;

GetOptions(
  'vendor!' => \$include_vendor,
  'test!' => \$include_test,
);

my ($want_lang, $init_dir) =
  $0 =~ m{js} ? ('js', 'client_app') :
  $0 =~ m{rb} ? ('rb', '') :
  ('', '');

if (!$include_test && $want_lang eq 'js') {
  $init_dir = 'client_app/cloud_ui';
}

my $func = shift(@ARGV);

my @files = @ARGV;
if (!@files) {
  chomp(my $git_root = qx{git rev-parse --show-toplevel 2>/dev/null});
  my $start = join('/', $git_root, $init_dir);
  chdir($start);
  chomp(@files = qx{git grep -l $func});
}

foreach my $file (@files) {
  next if $want_lang && $want_lang eq 'js' && $file !~ m{\.js$};
  next if $want_lang && $want_lang eq 'rb' && $file !~ m{\.(?:rb|t)$};
  next if $file eq '--';
  next if $file =~ m{vendor/} && ! $include_vendor;
  next if $file =~ m{test/} && ! $include_test;
  next if $file =~ m{\.t$} && ! $include_test;

  open my $fh, '<', $file or die "$file: $!\n";

  my $lang =
    $file =~ /\.js$/ ? 'js' :
    ($file =~ /\.rb$/ || $file =~ /\.t$/) ? 'rb'
    : 'js';

  my $matched;
  my $seen;
  my $spaces = 0;

  while (<$fh>) {
    my $join_char = '-';
    my $is_single_line = 0;

    if (!$seen) {
      if ($lang eq 'js') {
        if (/^\s*$func: function\s*\(\)\s*\{\}/) {
          $seen = $1;
          $spaces = undef;
          $is_single_line = 1;
          $matched = 1;
          $join_char = ':'
        } elsif (/^(\s*)$func: function/ || /^(\s*)function \s*$func\b\s*\(/) {
          $seen = 1;
          $spaces = length($1);
          $matched = 1;
          $join_char = ':';
        } elsif (/\b'$func'\b, function/) {
          $seen = 1;
          $matched = 1;
          ($spaces) = $_ =~ m{^(\s*)};
          $spaces = length($spaces);
          $join_char = ':';
        } elsif (/\bfunction\b\s*\(/ && /\b$func\b/ && ! /\b$func\./) {
          $seen = 1;
          $matched = 1;
          ($spaces) = $_ =~ m{^(\s*)};
          $spaces = length($spaces);
          $join_char = ':';
        } elsif (/\b$func\b\s*\([^)]*\)\s*\{/) {
          $seen = 1;
          $matched = 1;
          ($spaces) = $_ =~ m{^(\s*)};
          $spaces = length($spaces);
          $join_char = ':';
        }
      } elsif ($lang eq 'rb') {
        if (/^(\s*)def (?:self\.)?$func/) {
          $seen = 1;
          $spaces = length($1);
          $matched = 1;
          $join_char = ':';
        }
      }
    }

    $_ = colorize('salmon', $_, $func);
  
    if (!$is_single_line) {
      if ($seen .. /^\s{$spaces}\}/) {
        print join(colorize('cyan', $join_char), $file, $., $_);
      }
    } else {
      print join(colorize('cyan', $join_char), $file, $., $_);
    }
  
    if ($seen) {
      if (!$is_single_line) {
        $seen = 0 if $lang eq 'js' && /^\s{$spaces}\}/;
        $seen = 0 if $lang eq 'rb' && /^\s{$spaces}end/;
      } else {
        $seen = 0;
      }
    }
  }

  close $fh;
  print colorize('cyan', "--\n") if $matched;
}

sub colorize {
  my ($color, $line, $search) = @_;
  $search ||= $line;

  my ($start, $end);

  if ($color eq 'salmon') {
    $start = "\x1b\x5b\x30\x31\x3b\x33\x31\x6d\x1b\x5b\x4b";
    $end = "\x1b\x5b\x6d\x1b\x5b\x4b";
  } else {
    $start = "\x1b\x5b\x33\x36\x6d";
    $end = "\x1b\x5b\x6d";
  }

  $line =~ s{($search)}{$start$1$end};
  return $line;
}
